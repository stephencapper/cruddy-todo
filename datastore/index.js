const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////
// Don't forget Error first Callbacks!
// USE ONLY ASYNC FUNCTIONS

// Each new todo entry must be saved in its own file.
// Use the unique id generated by getNextUniqueId to create a file path inside the dataDir.
// Each time a POST request is made to the collection route, save a file with the todo item in this folder.
//Only save the todo text in the file, the id of the todo item is encoded into its filename --
// DO NOT STORE AN OBJECT.

// fs.opendir('./data', callback((err, dir) => {
//  dir.
// })
//
// writeFile('./data/${value}', text, (err)=> {})


exports.create = (text, callback) => {
  counter.getNextUniqueId((err, value) => {
    fs.writeFile(`./data/${value}.txt`, text, (err)=> {
      if(err) {
        //create to act as expected error needs to be truthy if bad request made
        console.log('whoops!');
        callback(err);
      } else {
// uncertain about what to pass in after null and maybe this stays because that's what the client wants!
        // {id: value, text: text}
        callback(null, {'id': value, 'text': text});
        // callback(null, { id, text }); this was the original
      }

    })


    // items[id] = text;



  });

};

exports.readAll = (callback) => {
  var data = _.map(items, (text, id) => {
    return { id, text };
  });
  callback(null, data);
};

exports.readOne = (id, callback) => {
  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
